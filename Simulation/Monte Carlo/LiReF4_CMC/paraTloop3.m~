% function [relaxE,bestE,bestE2,C_v,angl,mmagsq,msq0,msqx,msqy,mmag,malt,lat_mom,params]=paraTloop(ion,params,inter,lattice,EQlat_mom)
function [Egs_final,Egs2_final,bestE,bestE2,acc_rate,Marker,C_v,malt,lat_mom,params]=paraTloop3(ion,params,inter,lattice,EQlat_mom)

temp = params.temp';
N_meas = params.Nitermeas;
N_stats = params.Niterstat;
wforce = gcp(); % Start a new parallel pool if there isn't one
numWkrs = wforce.NumWorkers; % Retrieve the number of active workers in the parallel pool
% numWkrs = 4; % For debugging
% labindex = 1; % for debugging
fprintf('Total number of workers: %d.\n',numWkrs); %Checkpoint

% Check point to make sure each worker gets equal amount of tasks
if mod(size(temp,1),numWkrs) == 0
    block = uint8(size(temp,1)/numWkrs);
%     block = size(temp,2); % for debugging
else
    error('Number of parallel threads mismatch the temperature dimension, parallel tempering will fail!\n');
end

% container for parallel tempering
index = 1;
acc_rate = double.empty(params.meas_intv,block,N_meas,0); % container for acceptance rate per lattice sweep
tempMark = uint8.empty(ceil(N_meas * params.meas_intv / params.pt_intv)+1, block,0);
prob = rand(ceil(N_meas * params.meas_intv / params.pt_intv)+1, block); % transition probability criterion

% % angles in the XY plane
% angl=zeros([size(temp,2),size(lattice,2)]);

% energy per spin, squared energy per spin and fluctuations
Egs = double.empty(numWkrs,block,N_meas,0);
Egs2 = double.empty(numWkrs,block,N_meas,0);
altx_temp = zeros(block,numWkrs,N_stats,N_meas);
alty_temp = zeros(block,numWkrs,N_stats,N_meas);
% % mean magnetization squared, magnetization and alternated magnetization
% mmagsq = zeros(3,3,4,size(temp,2));
% mmag = zeros(3,4,size(temp,2));
malt = double.empty(block,numWkrs,0); % Alternating moments as order parameter

% % form factors 
% msq0 = zeros(3,3,4,4,size(temp,2));
% msqx = zeros(3,3,4,4,size(temp,2));
% msqy = zeros(3,3,4,4,size(temp,2));

field_change = params.field_changed;  % trigger for Ising_basis(), for tempscan, use only once
spmd
    for ii = 1:block
%     for ii = 1:size(temp,2) % single thread for-loop for debugging
%         t=tic;  
        % the temperature assignment is such that each core moves forward by one point but separated from each other by a stride of the size of the total number of cores.
        temperature = temp(ii+(labindex-1)*block);
        fprintf('T = %1$.3f, Field = [%2$.2f, %3$.2f, %4$.2f]\n',temperature,params.field(1),params.field(2),params.field(3));
        p_count = 1; % parallel tempering attempt counter
        tempMark(p_count,index,1) = labindex;
        E_0 = energy0(ion,params,inter,lattice,EQlat_mom{ii+(labindex-1)*block});
%         disp('Initial energy calculated.')

        % containers for statistical points at each measurement
        lat_mom = EQlat_mom{ii+(labindex-1)*block};
        for jj = 1:N_meas
%             [E_0,~,~,acc_rate(index,:,jj,1),~,lattice,lat_mom,~,temp(ii+(labindex-1)*block),~] = rand_walk(params.meas_intv,params.pt_intv,ion,params,inter,lattice,temp(ii+(labindex-1)*block),E_0,lat_mom,field_change,numWkrs,tempMark(index,:),prob(index,:));
%             [E_0,Egs(jj,index,1),Egs2(jj,index,1),~,mag,lattice,lat_mom,~,temp(ii+(labindex-1)*block),~] = rand_walk(N_stats,inf,ion,params,inter,lattice,temp(ii+(labindex-1)*block),E_0,lat_mom,field_change,numWkrs,tempMark(index,:),prob(index,:));     
            [E_0,~,~,acc_rate(:,index,jj,1),~,lattice,lat_mom,tempMark(:,index,1),temperature,p_count] = rand_walk3(params.meas_intv,params.pt_intv,ion,params,inter,lattice,temperature,E_0,lat_mom,field_change,numWkrs,p_count,tempMark(:,index,1),prob(:,index));
            [E_0,Egs(tempMark(p_count,index,1),index,jj,1),Egs2(tempMark(p_count,index,1),index,jj,1),~,mag,lattice,lat_mom,~,temperature,p_count] = rand_walk3(N_stats,inf,ion,params,inter,lattice,temperature,E_0,lat_mom,field_change,numWkrs,p_count,tempMark(:,index,1),prob(:,index));     
            altx_temp(index,tempMark(p_count,index,1),:,jj) = sum(params.C(1:4,1).*permute(mag(1,1:4,:),[2 3 1])); % alternating magnetizations in x
            alty_temp(index,tempMark(p_count,index,1),:,jj) = sum(params.C(1:4,2).*permute(mag(2,1:4,:),[2 3 1])); % alternating magnetizations in y
        end
        
    %     for jj=1:N
    %         angl(ii,jj) = atan2(templattice{jj}.mom(2),templattice{jj}.mom(1));
    %     end
    %     angl(:,ii) = arrayfun(@(lat) atan2(lat.mom(2),lat.mom(1)),templattice); % Vectorized from original

        index = index + 1;
%         toc(t);
        fprintf('Times of parallel tempering attempt: %d.\n', p_count)
    end
end

% (transitional) containers to collect data from all workers
Egs_temp = zeros(size(Egs{1}));
Egs2_temp = zeros(size(Egs2{1}));
Egs_final = zeros(N_meas,size(params.temp,2));
Egs2_final = zeros(N_meas,size(params.temp,2));
altx = zeros(block,N_stats,N_meas);
alty = zeros(block,N_stats,N_meas);
acc_rate_temp = zeros(params.meas_intv,size(params.temp,2));

% sum over all workers on the same datapoint (necessary for parallel tempering
for ii = 1:numWkrs
    Egs_temp = Egs_temp + Egs{ii};
    Egs2_temp = Egs2_temp + Egs2{ii};
    altx = altx + altx_temp{ii};
    alty = alty + alty_temp{ii};
end

for ii = 1:N_meas
    Egs_final(ii,:) = reshape(Egs_temp(:,:,ii)',size(params.temp));
    Egs2_final(ii,:) = reshape(Egs2_temp(:,:,ii)',size(params.temp));
end

bestE = mean(Egs_final,1);
bestE2 = mean(Egs2_final,1);
bestE = bestE(:);
bestE2 = bestE2(:);
lat_mom = [lat_mom{:}];
altx = squeeze(sum(altx,4)); % alternating magnetizations in x
alty = squeeze(sum(alty,4)); % alternating magnetizations in y
Marker = vertcat(tempMark{:});
Marker = reshape(Marker,size(tempMark{1},1),size(params.temp,2)); % reshape the parallel tempering markers in ascending tempertures

kk = 1;
for ii = 1:numWkrs
    for jj = 1:block
        malt(jj,ii,1) = mean(sqrt(altx(jj,ii,:).^2+alty(jj,ii,:).^2));
        var_temp = acc_rate{ii};
        acc_rate_temp(:,kk) = squeeze(mean(var_temp(:,jj,:),3));
        kk = kk + 1;
    end
end
acc_rate = acc_rate_temp';

malt = squeeze(malt);
malt = malt(:);

C_v = (bestE2(:)-(bestE(:).^2))./((1/11.6).*(params.temp'.^2)); % kB~1/11.6 [meV/K]

clearvars -except Egs_final Egs2_final acc_rate Marker bestE bestE2 C_v malt lat_mom params
end